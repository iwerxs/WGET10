how can this code be used to successfully download a website for offline viewing?
'main.go' file
```
package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"strings"

	"go-wget/pkg/downloader"
	"go-wget/pkg/parser"
	"go-wget/pkg/utils"
)

func main() {
    // Define command-line flags
    mirror := flag.Bool("mirror", false, "Enable mirroring of the website")
    convertLinks := flag.Bool("convert-links", false, "Convert links for offline viewing")
    reject := flag.String("reject", "", "Comma-separated list of file extensions to reject")
    exclude := flag.String("X", "", "Comma-separated list of directories to exclude")
    flag.Parse()

    // Parse the target URL
    args := flag.Args()
    if len(args) < 1 {
        fmt.Println("Usage: go-wget [options] URL")
        os.Exit(1)
    }
    targetURL := args[0]

    // Process flags
    var rejectExtensions []string
    if *reject != "" {
        rejectExtensions = strings.Split(*reject, ",")
    }

    var excludeDirs []string
    if *exclude != "" {
        excludeDirs = strings.Split(*exclude, ",")
    }

    // Create a directory based on the domain name
    domain, err := utils.GetDomainName(targetURL)
    if err != nil {
        log.Fatalf("Error parsing domain name: %v", err)
    }
    if err := os.MkdirAll(domain, os.ModePerm); err != nil {
        log.Fatalf("Error creating directory: %v", err)
    }

    // Fetch and parse the target URL
    doc, err := parser.FetchAndParse(targetURL)
    if err != nil {
        log.Fatalf("Error fetching and parsing URL: %v", err)
    }

    // Extract resources to download
    resourceMap, err := parser.ExtractResources(doc, targetURL, rejectExtensions, excludeDirs)
    if err != nil {
        log.Fatalf("Error extracting resources: %v", err)
    }

    // Download the resources into their respective directories
    err = downloader.DownloadResources(resourceMap, domain)
    if err != nil {
        log.Fatalf("Error downloading resources: %v", err)
    }

    // Convert links for offline viewing if the flag is set
    if *convertLinks {
        parser.ConvertLinks(doc, targetURL)
        // Save the modified document
        err = utils.SaveDocument(doc, domain, targetURL)
        if err != nil {
            log.Fatalf("Error saving document: %v", err)
        }
    }

    // Mirror the website if the flag is set
    if *mirror {
        err = downloader.MirrorWebsite(targetURL, domain, rejectExtensions, excludeDirs)
        if err != nil {
            log.Fatalf("Error mirroring website: %v", err)
        }
    }
}
```
code for 'downloader.go' file.
```
package downloader

import (
	"fmt"
	"os"
	"path/filepath"
	"net/http"
	"io"
)

// Download Website Resources
func DownloadResources(resources []string, savePath string) {
    for _, resource := range resources {
        // Get the resource file name
        fileName := filepath.Base(resource)

        // Determine the directory based on the file type
        var fileTypeDir string
        switch filepath.Ext(fileName) {
        case ".css":
            fileTypeDir = "css" // For .css files, save in the "css" directory
            fmt.Printf("CSS file found and moved to css directory: %s\n", resource)
        case ".gif":
            fileTypeDir = "img" // For .gif files, save in the "img" directory
            fmt.Printf("GIF file found and moved to img directory: %s\n", resource)
        default:
            fileTypeDir = "other" // For other file types, save in the "other" directory
            fmt.Printf("Other file found: %s\n", resource)
        }

        // Create the directory for the file type (if it doesn't exist)
        dirPath := filepath.Join(savePath, fileTypeDir)
        if err := os.MkdirAll(dirPath, os.ModePerm); err != nil {
            fmt.Printf("Error creating directory %s: %v\n", dirPath, err)
            continue
        }

        // Create the file to save the resource (now saving to the correct directory)
        outFile, err := os.Create(filepath.Join(dirPath, fileName)) // Use dirPath here
        if err != nil {
            fmt.Printf("Error creating file %s: %v\n", fileName, err)
            continue
        }
        defer outFile.Close()

        // Download the resource
        response, err := http.Get(resource)
        if err != nil {
            fmt.Printf("Error downloading %s: %v\n", resource, err)
            continue
        }
        defer response.Body.Close()

        // Copy the resource data into the file
        _, err = io.Copy(outFile, response.Body)
        if err != nil {
            fmt.Printf("Error saving file %s: %v\n", fileName, err)
        } else {
            fmt.Printf("Downloaded %s to %s\n", fileName, dirPath)
        }
    }
}
// Helper function to download a resource and save it
func downloadResource(resource string, dirPath string) error {
	// Get the filename from the resource URL
	_, fileName := filepath.Split(resource)

	// Create the file path
	filePath := filepath.Join(dirPath, fileName)

	// Download the resource
	resp, err := http.Get(resource)
	if err != nil {
		return fmt.Errorf("error downloading resource: %v", err)
	}
	defer resp.Body.Close()

	// Create the file
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("error creating file %s: %v", filePath, err)
	}
	defer file.Close()

	// Copy the content to the file
	_, err = io.Copy(file, resp.Body)
	if err != nil {
		return fmt.Errorf("error saving file %s: %v", filePath, err)
	}

	return nil
}
```
